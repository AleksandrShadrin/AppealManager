@using AppealManager.Presentation.Services;
@using System.Diagnostics;
@using LanguageExt;

@inject TextFileReader textFileReader;

<label class="h5 form-label">@Title</label>
<InputFile class="form-control form-file-input mb-2" OnChange="@LoadFile" disabled="@isLoading"/>

@if (timeWasMeasured)
{
    <h5>Файл загружен за: @elapsedMilliseconds мс</h5>    
}

@if(isError)
{
    <h5 class="text-danger">@error</h5>
}

@code {
    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public string Text { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> TextChanged { get; set; }

    private bool isLoading = false;
    private long elapsedMilliseconds = 0;
    private bool timeWasMeasured = false;
    private bool isError = false;
    private const string error = "Ошибка в считывании файла";

    /// <summary>
    /// Загружает текст файла
    /// </summary>
    /// <param name="e">Информация об выбранном файле</param>
    async Task LoadFile(InputFileChangeEventArgs e)
    {
        isLoading = true;
        timeWasMeasured = false;
        isError = false;
        Option<string> text = Option<string>.None;

        elapsedMilliseconds = await MeasureTime
            (
                async () => text = await GetTextFromFile(e.File)
            );

        await text
            .BiIterAsync
            (
                Some: async value =>
                {
                    timeWasMeasured = true;
                    await TextChanged.InvokeAsync(text.First());
                },
                None: () => isError = true
            );

        isLoading = false;
    }

    /// <summary>
    /// Измеряет время выполнения метода
    /// </summary>
    /// <param name="method">метод</param>
    /// <returns>Возращает число миллисекунд</returns>
    async Task<long> MeasureTime(Func<Task> method)
    {
        var stopwatch = Stopwatch.StartNew();

        await method();

        stopwatch.Stop();
        return stopwatch.ElapsedMilliseconds;
    }

    async Task<Option<string>> GetTextFromFile(IBrowserFile file)
        => await textFileReader.ReadFileAsync(file);
}
